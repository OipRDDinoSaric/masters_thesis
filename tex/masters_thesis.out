\BOOKMARK [0][-]{chapter.1}{Functional safety in embedded systems}{}% 1
\BOOKMARK [1][-]{section.1.1}{IEC standards}{chapter.1}% 2
\BOOKMARK [1][-]{section.1.2}{Terminology}{chapter.1}% 3
\BOOKMARK [2][-]{subsection.1.2.1}{SIL}{section.1.2}% 4
\BOOKMARK [2][-]{subsection.1.2.2}{SIF}{section.1.2}% 5
\BOOKMARK [2][-]{subsection.1.2.3}{SIS}{section.1.2}% 6
\BOOKMARK [1][-]{section.1.3}{Certification}{chapter.1}% 7
\BOOKMARK [1][-]{section.1.4}{Embedded processors redundancy - lockstep}{chapter.1}% 8
\BOOKMARK [2][-]{subsection.1.4.1}{Introduction}{section.1.4}% 9
\BOOKMARK [2][-]{subsection.1.4.2}{Delayed lockstep patentdelayedlockstep}{section.1.4}% 10
\BOOKMARK [2][-]{subsection.1.4.3}{Positional diversity}{section.1.4}% 11
\BOOKMARK [2][-]{subsection.1.4.4}{Example use case lockstepanalysis}{section.1.4}% 12
\BOOKMARK [0][-]{chapter.2}{ARM Cortex R comparison with ARM cortex M}{}% 13
\BOOKMARK [1][-]{section.2.1}{ARM Cortex R introduction}{chapter.2}% 14
\BOOKMARK [1][-]{section.2.2}{ARM Cortex M introduction}{chapter.2}% 15
\BOOKMARK [1][-]{section.2.3}{ARM Cortex-R5 processor lockstep}{chapter.2}% 16
\BOOKMARK [2][-]{subsection.2.3.1}{Dual core lockstep}{section.2.3}% 17
\BOOKMARK [2][-]{subsection.2.3.2}{Triple core lockstep}{section.2.3}% 18
\BOOKMARK [1][-]{section.2.4}{Sto jos dodaje Cortex R}{chapter.2}% 19
\BOOKMARK [0][-]{chapter.3}{FreeRTOS kernel}{}% 20
\BOOKMARK [1][-]{section.3.1}{Introduction}{chapter.3}% 21
\BOOKMARK [1][-]{section.3.2}{Inner workings of the tasks}{chapter.3}% 22
\BOOKMARK [1][-]{section.3.3}{Inner workings of the scheduler}{chapter.3}% 23
\BOOKMARK [1][-]{section.3.4}{Inner workings of the timers}{chapter.3}% 24
\BOOKMARK [0][-]{chapter.4}{FreeRTOS functional safety additions}{}% 25
\BOOKMARK [1][-]{section.4.1}{Timed tasks addition}{chapter.4}% 26
\BOOKMARK [2][-]{subsection.4.1.1}{Introduction}{section.4.1}% 27
\BOOKMARK [2][-]{subsection.4.1.2}{Architecture}{section.4.1}% 28
\BOOKMARK [2][-]{subsection.4.1.3}{Limitiations}{section.4.1}% 29
\BOOKMARK [1][-]{section.4.2}{Replicated tasks}{chapter.4}% 30
\BOOKMARK [2][-]{subsection.4.2.1}{Introduction}{section.4.2}% 31
\BOOKMARK [2][-]{subsection.4.2.2}{Architecture}{section.4.2}% 32
\BOOKMARK [2][-]{subsection.4.2.3}{Limitiations}{section.4.2}% 33
\BOOKMARK [1][-]{section.4.3}{Command reference}{chapter.4}% 34
\BOOKMARK [2][-]{subsection.4.3.1}{xTaskCreateTimed - Creates a timed task.}{section.4.3}% 35
\BOOKMARK [2][-]{subsection.4.3.2}{vTaskTimedReset - Resets the timer of timed task.}{section.4.3}% 36
\BOOKMARK [2][-]{subsection.4.3.3}{xTimerGetTaskHandle - Gets the corresponding timed task handle from the timer handle.}{section.4.3}% 37
\BOOKMARK [2][-]{subsection.4.3.4}{xTaskCreateReplicated - Creates a replicated task.}{section.4.3}% 38
\BOOKMARK [2][-]{subsection.4.3.5}{xTaskSetCompareValue - Sets a compare value for the calling task.}{section.4.3}% 39
\BOOKMARK [2][-]{subsection.4.3.6}{vTaskSyncAndCompare - Syncronizes the replicated tasks and compares compare values.}{section.4.3}% 40
\BOOKMARK [2][-]{subsection.4.3.7}{eTaskGetType - Get the type of the task.}{section.4.3}% 41
\BOOKMARK [2][-]{subsection.4.3.8}{xTimerPause - Pauses the timer.}{section.4.3}% 42
\BOOKMARK [2][-]{subsection.4.3.9}{xTimerPauseFromISR - Pauses the timer from interrupt service routine.}{section.4.3}% 43
\BOOKMARK [2][-]{subsection.4.3.10}{xTimerResume - Resumes the timer.}{section.4.3}% 44
\BOOKMARK [2][-]{subsection.4.3.11}{xTimerResumeFromISR - Resumes the timer from interrupt service routine.}{section.4.3}% 45
\BOOKMARK [2][-]{subsection.4.3.12}{xTimerIsTimerActiveFromISR - Checks if timer is active from interrupt service routine.}{section.4.3}% 46
\BOOKMARK [0][-]{chapter.5}{Secure bootloader}{}% 47
\BOOKMARK [1][-]{section.5.1}{What is a bootloader?}{chapter.5}% 48
\BOOKMARK [1][-]{section.5.2}{Developed bootloader overview}{chapter.5}% 49
\BOOKMARK [1][-]{section.5.3}{The bootloader's architecture}{chapter.5}% 50
\BOOKMARK [1][-]{section.5.4}{Flash memory organization}{chapter.5}% 51
\BOOKMARK [1][-]{section.5.5}{Application boot record}{chapter.5}% 52
\BOOKMARK [1][-]{section.5.6}{User application modifications}{chapter.5}% 53
\BOOKMARK [1][-]{section.5.7}{Command reference}{chapter.5}% 54
\BOOKMARK [2][-]{subsection.5.7.1}{version - Gets a version of the bootloader.}{section.5.7}% 55
\BOOKMARK [2][-]{subsection.5.7.2}{help - Makes life easier.}{section.5.7}% 56
\BOOKMARK [2][-]{subsection.5.7.3}{reset - Resets the microcontroller.}{section.5.7}% 57
\BOOKMARK [2][-]{subsection.5.7.4}{cid - Gets chip identification number.}{section.5.7}% 58
\BOOKMARK [2][-]{subsection.5.7.5}{get-rdp-level - Gets read protection }{section.5.7}% 59
\BOOKMARK [2][-]{subsection.5.7.6}{jump-to - Jumps to a requested address.}{section.5.7}% 60
\BOOKMARK [2][-]{subsection.5.7.7}{flash-erase - Erases flash memory.}{section.5.7}% 61
\BOOKMARK [2][-]{subsection.5.7.8}{flash-write - Writes to flash memory.}{section.5.7}% 62
\BOOKMARK [2][-]{subsection.5.7.9}{mem-read - Read bytes from memory.}{section.5.7}% 63
\BOOKMARK [2][-]{subsection.5.7.10}{update-act - Updates active application from new application memory area.}{section.5.7}% 64
\BOOKMARK [2][-]{subsection.5.7.11}{update-new - Updates new application.}{section.5.7}% 65
\BOOKMARK [2][-]{subsection.5.7.12}{en-write-prot - Enables write protection per sector.}{section.5.7}% 66
\BOOKMARK [2][-]{subsection.5.7.13}{dis-write-prot - Disables write protection per sector.}{section.5.7}% 67
\BOOKMARK [2][-]{subsection.5.7.14}{get-write-prot - Returns bit array of sector write protection.}{section.5.7}% 68
\BOOKMARK [2][-]{subsection.5.7.15}{exit - Exits the bootloader and starts the user application.}{section.5.7}% 69
\BOOKMARK [0][-]{chapter.6}{Conclusion}{}% 70
\BOOKMARK [0][-]{chapter*.32}{Bibliography}{}% 71
